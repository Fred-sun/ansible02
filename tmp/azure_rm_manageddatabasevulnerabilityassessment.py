#!/usr/bin/python
#
# Copyright (c) 2020 GuopengLin, (@t-glin)
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_manageddatabasevulnerabilityassessment
version_added: '2.9'
short_description: Manage Azure ManagedDatabaseVulnerabilityAssessment instance.
description:
  - >-
    Create, update and delete instance of Azure
    ManagedDatabaseVulnerabilityAssessment.
options:
  resource_group_name:
    description:
      - >-
        The name of the resource group that contains the resource. You can
        obtain this value from the Azure Resource Manager API or the portal.
    required: true
    type: str
  managed_instance_name:
    description:
      - The name of the managed instance.
    required: true
    type: str
  database_name:
    description:
      - >-
        The name of the database for which the vulnerability assessment is
        defined.
    required: true
    type: str
  vulnerability_assessment_name:
    description:
      - The name of the vulnerability assessment.
    required: true
    type: str
    choices:
      - default
  storage_container_path:
    description:
      - >-
        A blob storage container path to hold the scan results (e.g.
        https://myStorage.blob.core.windows.net/VaScans/).  It is required if
        server level vulnerability assessment policy doesn't set
    type: str
  storage_container_sas_key:
    description:
      - >-
        A shared access signature (SAS Key) that has read and write access to
        the blob container specified in 'storageContainerPath' parameter. If
        'storageAccountAccessKey' isn't specified, StorageContainerSasKey is
        required.
    type: str
  storage_account_access_key:
    description:
      - >-
        Specifies the identifier key of the storage account for vulnerability
        assessment scan results. If 'StorageContainerSasKey' isn't specified,
        storageAccountAccessKey is required.
    type: str
  recurring_scans:
    description:
      - The recurring scans settings
    type: dict
    suboptions:
      is_enabled:
        description:
          - Recurring scans state.
        type: bool
      email_subscription_admins:
        description:
          - >-
            Specifies that the schedule scan notification will be is sent to the
            subscription administrators.
        type: bool
      emails:
        description:
          - >-
            Specifies an array of e-mail addresses to which the scan
            notification is sent.
        type: list
  state:
    description:
      - Assert the state of the ManagedDatabaseVulnerabilityAssessment.
      - >-
        Use C(present) to create or update an
        ManagedDatabaseVulnerabilityAssessment and C(absent) to delete it.
    default: present
    choices:
      - absent
      - present
extends_documentation_fragment:
  - azure
author:
  - GuopengLin (@t-glin)

'''

EXAMPLES = '''
    - name: Create a database's vulnerability assessment with all parameters
      azure_rm_manageddatabasevulnerabilityassessment: 
        database_name: testdb
        managed_instance_name: vulnerabilityaseessmenttest-6440
        resource_group_name: vulnerabilityaseessmenttest-4799
        vulnerability_assessment_name: default
        properties:
          recurring_scans:
            email_subscription_admins: true
            emails:
              - email1@mail.com
              - email2@mail.com
            is_enabled: true
          storage_container_path: 'https://myStorage.blob.core.windows.net/vulnerability-assessment/'
          storage_container_sas_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        

    - name: Create a database's vulnerability assessment with minimal parameters
      azure_rm_manageddatabasevulnerabilityassessment: 
        database_name: testdb
        managed_instance_name: vulnerabilityaseessmenttest-6440
        resource_group_name: vulnerabilityaseessmenttest-4799
        vulnerability_assessment_name: default
        properties:
          storage_container_path: 'https://myStorage.blob.core.windows.net/vulnerability-assessment/'
          storage_container_sas_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        

    - name: Remove a database's vulnerability assessment
      azure_rm_manageddatabasevulnerabilityassessment: 
        database_name: testdb
        managed_instance_name: vulnerabilityaseessmenttest-6440
        resource_group_name: vulnerabilityaseessmenttest-4799
        vulnerability_assessment_name: default
        

'''

RETURN = '''
id:
  description:
    - Resource ID.
  returned: always
  type: str
  sample: null
name:
  description:
    - Resource name.
  returned: always
  type: str
  sample: null
type:
  description:
    - Resource type.
  returned: always
  type: str
  sample: null
storage_container_path:
  description:
    - >-
      A blob storage container path to hold the scan results (e.g.
      https://myStorage.blob.core.windows.net/VaScans/).  It is required if
      server level vulnerability assessment policy doesn't set
  returned: always
  type: str
  sample: null
storage_container_sas_key:
  description:
    - >-
      A shared access signature (SAS Key) that has read and write access to the
      blob container specified in 'storageContainerPath' parameter. If
      'storageAccountAccessKey' isn't specified, StorageContainerSasKey is
      required.
  returned: always
  type: str
  sample: null
storage_account_access_key:
  description:
    - >-
      Specifies the identifier key of the storage account for vulnerability
      assessment scan results. If 'StorageContainerSasKey' isn't specified,
      storageAccountAccessKey is required.
  returned: always
  type: str
  sample: null
recurring_scans:
  description:
    - The recurring scans settings
  returned: always
  type: dict
  sample: null
  contains:
    is_enabled:
      description:
        - Recurring scans state.
      returned: always
      type: bool
      sample: null
    email_subscription_admins:
      description:
        - >-
          Specifies that the schedule scan notification will be is sent to the
          subscription administrators.
      returned: always
      type: bool
      sample: null
    emails:
      description:
        - >-
          Specifies an array of e-mail addresses to which the scan notification
          is sent.
      returned: always
      type: list
      sample: null

'''

import time
import json
import re
from ansible.module_utils.azure_rm_common_ext import AzureRMModuleBaseExt
from copy import deepcopy
try:
    from msrestazure.azure_exceptions import CloudError
    from azure.mgmt.sql import SqlManagementClient
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.polling import LROPoller
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)


class AzureRMManagedDatabaseVulnerabilityAssessment(AzureRMModuleBaseExt):
    def __init__(self):
        self.module_arg_spec = dict(
            resource_group_name=dict(
                type='str',
                required=True
            ),
            managed_instance_name=dict(
                type='str',
                required=True
            ),
            database_name=dict(
                type='str',
                required=True
            ),
            vulnerability_assessment_name=dict(
                type='str',
                choices=['default'],
                required=True
            ),
            storage_container_path=dict(
                type='str',
                disposition='/storage_container_path'
            ),
            storage_container_sas_key=dict(
                type='str',
                disposition='/storage_container_sas_key'
            ),
            storage_account_access_key=dict(
                type='str',
                disposition='/storage_account_access_key'
            ),
            recurring_scans=dict(
                type='dict',
                disposition='/recurring_scans',
                options=dict(
                    is_enabled=dict(
                        type='bool',
                        disposition='is_enabled'
                    ),
                    email_subscription_admins=dict(
                        type='bool',
                        disposition='email_subscription_admins'
                    ),
                    emails=dict(
                        type='list',
                        disposition='emails',
                        elements='str'
                    )
                )
            ),
            state=dict(
                type='str',
                default='present',
                choices=['present', 'absent']
            )
        )

        self.resource_group_name = None
        self.managed_instance_name = None
        self.database_name = None
        self.vulnerability_assessment_name = None
        self.body = {}

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        super(AzureRMManagedDatabaseVulnerabilityAssessment, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                                            supports_check_mode=True,
                                                                            supports_tags=True)

    def exec_module(self, **kwargs):
        for key in list(self.module_arg_spec.keys()):
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.body[key] = kwargs[key]

        self.inflate_parameters(self.module_arg_spec, self.body, 0)

        old_response = None
        response = None

        self.mgmt_client = self.get_mgmt_svc_client(SqlManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager,
                                                    api_version='2017-10-01-preview')

        old_response = self.get_resource()

        if not old_response:
            if self.state == 'present':
                self.to_do = Actions.Create
        else:
            if self.state == 'absent':
                self.to_do = Actions.Delete
            else:
                modifiers = {}
                self.create_compare_modifiers(self.module_arg_spec, '', modifiers)
                self.results['modifiers'] = modifiers
                self.results['compare'] = []
                if not self.default_compare(modifiers, self.body, old_response, '', self.results):
                    self.to_do = Actions.Update

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.results['changed'] = True
            if self.check_mode:
                return self.results
            response = self.create_update_resource()
        elif self.to_do == Actions.Delete:
            self.results['changed'] = True
            if self.check_mode:
                return self.results
            self.delete_resource()
        else:
            self.results['changed'] = False
            response = old_response

        return self.results

    def create_update_resource(self):
        try:
            response = self.mgmt_client.managed_database_vulnerability_assessments.create_or_update(resource_group_name=self.resource_group_name,
                                                                                                    managed_instance_name=self.managed_instance_name,
                                                                                                    database_name=self.database_name,
                                                                                                    vulnerability_assessment_name=self.vulnerability_assessment_name,
                                                                                                    parameters=self.body)
            if isinstance(response, AzureOperationPoller) or isinstance(response, LROPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the ManagedDatabaseVulnerabilityAssessment instance.')
            self.fail('Error creating the ManagedDatabaseVulnerabilityAssessment instance: {0}'.format(str(exc)))
        return response.as_dict()

    def delete_resource(self):
        try:
            response = self.mgmt_client.managed_database_vulnerability_assessments.delete(resource_group_name=self.resource_group_name,
                                                                                          managed_instance_name=self.managed_instance_name,
                                                                                          database_name=self.database_name,
                                                                                          vulnerability_assessment_name=self.vulnerability_assessment_name)
        except CloudError as e:
            self.log('Error attempting to delete the ManagedDatabaseVulnerabilityAssessment instance.')
            self.fail('Error deleting the ManagedDatabaseVulnerabilityAssessment instance: {0}'.format(str(e)))

        return True

    def get_resource(self):
        try:
            response = self.mgmt_client.managed_database_vulnerability_assessments.get(resource_group_name=self.resource_group_name,
                                                                                       managed_instance_name=self.managed_instance_name,
                                                                                       database_name=self.database_name,
                                                                                       vulnerability_assessment_name=self.vulnerability_assessment_name)
        except CloudError as e:
            return False
        return response.as_dict()


def main():
    AzureRMManagedDatabaseVulnerabilityAssessment()


if __name__ == '__main__':
    main()
